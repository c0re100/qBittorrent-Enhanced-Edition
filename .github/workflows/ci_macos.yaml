name: CI - macOS - Universal
on: [pull_request, push]

jobs:
  ci:
    name: Build
    runs-on: macos-latest

    strategy:
      fail-fast: false
      matrix:
        libt_version: ["2.0.5", "1.2.15"]
        qbt_gui: ["GUI=ON", "GUI=OFF"]
        qt_version: ["5.15.2", "6.2.0"]
        exclude:
          - libt_version: "1.2.15"
            qt_version: "6.2.0"

    env:
      openssl_ver: 1.1.1m

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          brew update > /dev/null
          brew install \
            cmake ninja \
            boost zlib

      - name: Setup ccache
        uses: Chocobo1/setup-ccache-action@v1
        with:
          update_packager_index: false
      
      - name: Install OpenSSL-Universal
        run: |
          function build_openssl_arch()
          {
              local arch=$1

              mkdir -p lib-$1 && cd lib-$1
              "$GITHUB_WORKSPACE/openssl-$openssl_ver/Configure" no-comp no-deprecated no-dynamic-engine no-tests no-shared no-zlib --openssldir=/etc/ssl --prefix=$GITHUB_WORKSPACE/openssl-$openssl_ver/lib-$1 -mmacosx-version-min=10.15 darwin64-${arch}-cc
              make -j$(sysctl -n hw.ncpu)
              make install_sw
              cd -
          }
          curl -L https://www.openssl.org/source/openssl-$openssl_ver.tar.gz | tar xz
          build_openssl_arch arm64
          build_openssl_arch x86_64
          
          mkdir -p "$GITHUB_WORKSPACE/openssl-$openssl_ver-universal/lib"
          cp -r "$GITHUB_WORKSPACE/openssl-$openssl_ver/lib-x86_64/include" "$GITHUB_WORKSPACE/openssl-$openssl_ver-universal/"
          
          lipo -create "$GITHUB_WORKSPACE/openssl-$openssl_ver/lib-x86_64/lib/libcrypto.a" "$GITHUB_WORKSPACE/openssl-$openssl_ver/lib-arm64/lib/libcrypto.a" -output "$GITHUB_WORKSPACE/openssl-$openssl_ver-universal/lib/libcrypto.a"
          lipo -create "$GITHUB_WORKSPACE/openssl-$openssl_ver/lib-x86_64/lib/libssl.a" "$GITHUB_WORKSPACE/openssl-$openssl_ver/lib-arm64/lib/libssl.a" -output "$GITHUB_WORKSPACE/openssl-$openssl_ver-universal/lib/libssl.a"

          echo "openssl_root=$GITHUB_WORKSPACE/openssl-$openssl_ver-universal" >> $GITHUB_ENV

      - name: Install Qt 5
        if: ${{ startsWith(matrix.qt_version, 5) }}
        run: |
          function build_qt5_arch()
          {
              local arch=$1
              local _target_mkspec_name="macx-clang-$1"
              if ! [[ -d "$GITHUB_WORKSPACE/qt5/qtbase/mkspecs/${_target_mkspec_name}" ]]
              then
                  cp -r "$GITHUB_WORKSPACE/qt5/qtbase/mkspecs/macx-clang" "$GITHUB_WORKSPACE/qt5/qtbase/mkspecs/${_target_mkspec_name}"
                  target_macx_conf_file="$GITHUB_WORKSPACE/qt5/qtbase/mkspecs/${_target_mkspec_name}/qmake.conf"
                  sed -i '' -e '$ d' "${target_macx_conf_file}"
                  echo "QMAKE_APPLE_DEVICE_ARCHS = $1" >> "${target_macx_conf_file}"
                  echo "" >> "${target_macx_conf_file}"
                  echo "load(qt_config)" >> "${target_macx_conf_file}"
              fi
              local _qt_cross_compile_args="-xplatform ${_target_mkspec_name}"

              mkdir -p lib-$1 && cd lib-$1
              "$GITHUB_WORKSPACE/qt5/configure" -prefix $GITHUB_WORKSPACE/lib_$1 -opensource -confirm-license -release -static -appstore-compliant -c++std c++17 -no-pch -I "${{ env.openssl_root }}/include" -L "${{ env.openssl_root }}/lib" -make libs -no-compile-examples -no-dbus -no-icu -qt-pcre -system-zlib -ssl -openssl-linked -no-cups -qt-libpng -qt-libjpeg -no-feature-testlib -no-feature-concurrent -platform macx-clang ${_qt_cross_compile_args}
              make -j$(sysctl -n hw.ncpu)
              make install
              cd -
          }
          curl -L https://gist.githubusercontent.com/R0GERIUS/a2d62e21995e732b9fe510efce71965d/raw/26e9f02b88d6eb41b3a6b636248d6290094ecdc9/qt5_xcode13.patch -o $GITHUB_WORKSPACE/qt5_xcode13.patch
          git clone https://code.qt.io/qt/qt5.git $GITHUB_WORKSPACE/qt5
          cd qt5
          git checkout "${{ matrix.qt_version }}"
          perl init-repository --module-subset=qtbase,qtmacextras,qtsvg,qttools,qttranslations
          git apply --whitespace=nowarn $GITHUB_WORKSPACE/qt5_xcode13.patch
          cd -
          build_qt5_arch x86_64
          build_qt5_arch arm64
          

      - name: Install Qt 6
        if: ${{ startsWith(matrix.qt_version, 6) }}
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.qt_version }}

      - name: Install libtorrent
        run: |
          git clone \
            --branch v${{ matrix.libt_version }} \
            --depth 1 \
            --recurse-submodules \
            https://github.com/arvidn/libtorrent.git
          cd libtorrent
          cmake \
            -B build \
            -G "Ninja" \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" \
            -DCMAKE_CXX_STANDARD=17 \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -Ddeprecated-functions=OFF \
            -DOPENSSL_ROOT_DIR="${{ env.openssl_root }}"
          cmake --build build
          sudo cmake --install build  

      - name: Build qBittorrent (Qt5)
        if: ${{ startsWith(matrix.qt_version, 5) }}
        run: |
          lupdate -extensions c,cpp,h,hpp,ui ./
          function build_qbt_arch()
          {
            cmake \
            -B build-$1 \
            -G "Ninja" \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DCMAKE_PREFIX_PATH="$GITHUB_WORKSPACE/lib_$1" \
            -DCMAKE_OSX_ARCHITECTURES="$1" \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DOPENSSL_ROOT_DIR="${{ env.openssl_root }}" \
            -DVERBOSE_CONFIGURE=ON \
            -D${{ matrix.qbt_gui }}
            cmake --build build-$1
          }
          build_qbt_arch x86_64
          build_qbt_arch arm64
          mkdir -p $GITHUB_WORKSPACE/build
          cp -r $GITHUB_WORKSPACE/build-x86_64/qbittorrent*.app $GITHUB_WORKSPACE/build

      - name: Setup Debug Session
        if: ${{ startsWith(matrix.qt_version, 5) }}
        uses: csexton/debugger-action@master 
          
      - name: Build qBittorrent (Qt6)
        if: ${{ startsWith(matrix.qt_version, 6) }}
        run: |
          lupdate -extensions c,cpp,h,hpp,ui ./
          cmake \
            -B build \
            -G "Ninja" \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DOPENSSL_ROOT_DIR="${{ env.openssl_root }}" \
            -DQT6=ON \
            -DVERBOSE_CONFIGURE=ON \
            -D${{ matrix.qbt_gui }}
          cmake --build build

      - name: Prepare build artifacts
        run: |
          mkdir upload
          mv build/qbittorrent*.app upload
          mkdir upload/cmake
          cp build/compile_commands.json upload/cmake
          mkdir upload/cmake/libtorrent
          cp libtorrent/build/compile_commands.json upload/cmake/libtorrent

      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: qBittorrent-CI_macOS_${{ matrix.qbt_gui }}_libtorrent-${{ matrix.libt_version }}_Qt-${{ matrix.qt_version }}
          path: upload
